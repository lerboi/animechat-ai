Negative prompts
blurry eyes, deformed eyes, asymmetrical eyes, extra eyes, fused eyes, discolored eyes, cross-eyed, lazy eye, low-resolution eyes, empty eyes, dull pupils, unnatural reflections, distorted face, missing iris, extra hands, extra fingers, deformed hands, incorrect anatomy, mismatched hand size, fused fingers, mutated limbs, twisted hand poses, cartoonish hands, glitchy anatomy, overexposed, pixelated fingers, unnatural gestures

Example Prompt:
Default: "1girl, cagliostro, granblue fantasy, violet eyes, standing, hand on own chin, looking at object, smile, closed mouth, table, beaker, glass tube, experiment apparatus, dark room, laboratory, upper body"

TODO:
- Add functionality where when picture icon pressed, only select chathistory from the messages above content
- implement Subscription API routes into respective .jsx pages
- edit webhook.js to change find.billing to find.Subscription
- figure out good ai prompt to create all characters
- Make pictures stay
- Add Gallery feature

v0 prompts:

I am passing the above into an AI model to help me to write the code. Help me to streamline and improve my prompt such that it will make the AI produce better outcomes. Keep all the details that i wrote and do not remove any details.

TASK

{insert storePage.jsx}

The above is my StorePage.jsx, where the user clicks on the subscription and is redirected to checkout

 {insert create-checkout-session}

 Above is my create-checkout-session API for users to checkout on the stripe checkout page.

 {insert /success page}

 Above is my page.jsxx for a success_url after a succesful transaction

 {insert prisma schema}

 Above is my prisma schema for reference

Success Page Logic:
When a user successfully completes a payment and is redirected to the success page, run two functions:
    - addPaymentInfo()
    - addSubscriptionInfo()

Both functions will connect to API routes:
    - addPaymentInfo API → Route: /api/payments/{insert name}
    - addSubscriptionInfo API → Route: /api/subscriptions/{insert name}

Additionally, create the API routes required for both functions.

API Route: addPaymentInfo
- In this route, write the logic to store all the necessary payment information using the Payment model from my Prisma schema.
- Ensure all relevant fields are properly populated based on the model.

API Route: addSubscriptionInfo
- In this route, write the logic to store all the required subscription details with reference to my Subscription model from the Prisma schema.
- For the startDate and endDate:
    - startDate should be the exact date the payment was made.
    - endDate should be 1 month from the startDate (for example, if the start date is January 22, the end date will be February 22).

I am using Nextjs14 with App router