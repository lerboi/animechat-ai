// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  googleId      String?
  password      String?         @unique
  accounts      Account[]
  sessions      Session[]

  activeSubscription Subscription? @relation("ActiveSubscription")
  subscriptions      Subscription[] @relation("UserSubscriptions")
  payments           Payment[]
  textTokens         Int            @default(50)
  imageTokens        Int            @default(3)
  
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  userCharacters UserCharacter[]
  authenticators Authenticator[]
}

model Subscription {
  id                   String             @id @default(cuid())
  userId               String
  user                 User               @relation("UserSubscriptions", fields: [userId], references: [id])
  activeForUser        User?              @relation("ActiveSubscription", fields: [activeUserId], references: [id])
  activeUserId         String?            @unique
  stripeSubscriptionId String             @unique
  priceId              String
  status               SubscriptionStatus
  tier                 Tier               @default(FREE)
  startDate            DateTime
  endDate              DateTime?
  paymentMethod        String
  cardLastFour         String?
  cardBrand            String?
  billingAddress       String?
  createdAt            DateTime           @default(now())
  updatedAt            DateTime           @updatedAt
  payments             Payment[]

  isActive             Boolean            @default(true)
  nextSubscriptionId   String?            @unique
  nextSubscription     Subscription?      @relation("SubscriptionDowngrade", fields: [nextSubscriptionId], references: [id])
  previousSubscription Subscription?      @relation("SubscriptionDowngrade")

  @@index([userId])
}

model Payment {
  id             Int          @id @default(autoincrement())
  subscriptionId String       
  subscription   Subscription @relation(fields: [subscriptionId], references: [id])
  userId         String       
  user           User         @relation(fields: [userId], references: [id])
  amount         Float
  status         String
  createdAt      DateTime     @default(now())

  @@index([subscriptionId])
  @@index([userId])
}

enum Tier {
  FREE
  PLUS
  PREMIUM
}

enum SubscriptionStatus {
  ACTIVE
  CANCELED
  PAST_DUE
  INACTIVE
}


model Character {
  id           Int        @id @default(autoincrement())
  name         String
  description  String?    @default("")
  tags         Tag[]      @relation("CharacterTags") // A character can have multiple tags
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  picture      String?
  animename    String?
  personaData   Persona?   @relation(fields: [personaId], references: [id])
  personaId     Int?       @unique // Foreign key reference to Persona
  userCharacters UserCharacter[]
}

model Persona {
  id            Int       @id @default(autoincrement())
  age           String?
  gender        String?
  nationality   String?
  sexuality     String?
  height        String?
  species       String?
  occupation    String?
  affiliation   String?
  mind          String?
  personality   String?
  appearance    String?
  clothes       String?
  attributes    String?
  likes         String?
  dislikes      String?
  description   String?
  scenario      String?
  aiDescription String?
  character     Character? @relation // Optional relation to UserCharacter
}

model UserCharacter {
  id            Int        @id @default(autoincrement())
  user          User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        String

  character     Character  @relation(fields: [characterId], references: [id], onDelete: Cascade)
  characterId   Int

  genkey        String?   
  version       Int        @default(1) // Version number for the unique copy of the character

  chatHistory   String[]   // Array of strings to store user-specific chat history for this character version

  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt

  @@unique([userId, characterId, version]) // Ensure that a unique version exists per user and character
}

model Tag {
  id          Int         @id @default(autoincrement())
  name        String      @unique
  characters  Character[] @relation("CharacterTags") // A tag can relate to many characters
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}
