Negative prompts
blurry eyes, deformed eyes, asymmetrical eyes, extra eyes, fused eyes, discolored eyes, cross-eyed, lazy eye, low-resolution eyes, empty eyes, dull pupils, unnatural reflections, distorted face, missing iris, extra hands, extra fingers, deformed hands, incorrect anatomy, mismatched hand size, fused fingers, mutated limbs, twisted hand poses, cartoonish hands, glitchy anatomy, overexposed, pixelated fingers, unnatural gestures

Example Prompt:
Default: "1girl, cagliostro, granblue fantasy, violet eyes, standing, hand on own chin, looking at object, smile, closed mouth, table, beaker, glass tube, experiment apparatus, dark room, laboratory, upper body"

TODO:
- Add functionality where when picture icon pressed, only select chathistory from the messages above content
- edit webhook.js to change find.billing to find.Subscription
- figure out good ai prompt to create all characters
- Make pictures stay
- Add Gallery feature
- add isGuest to user model
- add token run out functionality
- when sm screen, add nav to top and search bar

v0 prompts:

I am passing the above into an AI model to help me to write the code. Help me to streamline and improve my prompt such that it will make the AI produce better outcomes. Keep all the details that i wrote and do not remove any details.

IMPORTANT:
Keep ALL functionalities and functions in ALL pages/components. DO NOT change any functionality or remove any functionality. I am using Javascript only with Nextjs14 app router.

------------------------------------------------------------------------------------------------------------------------------------------
TOKEN RAN OUT FUNCTIONALITY

{insert ChatWindow.jsx}

The above is my ChatWindow.jsx

async function fetchTokens() {
        if (!session) return;
        
        try {
            const response = await fetch('/api/fetchTokensAPI', {
                method: "GET",
                headers: {
                    "Content-Type": "application/json"
                }
            });
            if (response.ok) {
                const data = await response.json();
                setTokens(data);
            }
        } catch (error) {
            console.error('Error fetching tokens:', error);
        }
    };

The above is a fetchTokens() function that i have written for fetching the numebr of tokens a user has. tokens.textTokens are Text Tokens, and tokens.imageTokens are image tokens. Use this for fetching tokens.

I need help editing my code to add the following functionality:

1. Token Depletion Dialog Box:

- When the user’s token amount reaches 0, and they try to send a message or request a picture:
    - If Text Token is 0, display a dialog box saying, “You have run out of text tokens.”
    - If Image Token is 0, display a dialog box saying, “You have run out of image tokens.”
    - Do not run the handleSendMessage function if the user tries to send a text or request a image without tokens left.
- Inside the dialog, include:
    - A “Buy More” button that redirects the user to /Store when clicked.
    - A “Cancel” button that closes the dialog.

    Note: I want a useState for textTokenDepleted and imgTokenDepleted to be created and given a default value of false when the user runs out of either tokens. Once the user gets more tokens and their amount of tokens rise above 0 again, set the value of the states back to false.

2. Tooltip for Tokens in ChatWindow:
- In the User Input Section of ChatWindow.jsx:
    - When the user clicks on the LiaCoinsSolid icon, a tooltip-style popup should appear on top of the icon.
    - The tooltip must display the user’s current number of Text Tokens and Image Tokens.

Make sure all necessary logic is properly integrated. Keep the UI intuitive and responsive to user interactions.
 
IMPORTANT:
Keep ALL functionalities and functions in ALL pages/components. DO NOT change any functionality or remove any functionality. I am using Javascript only with Nextjs14 app router.

------------------------------------------------------------------------------------------------------------------------------------------
MAKE PICTURES STAY IN CHAT HISTORY

{insert chatWindow.jsx}

Above is my ChatWindow.jsx

{insert addChatHistoryAPI route}

Above is my addChatHistoryAPI route function.

{insert prisma.schema}

Above is my Prisma schema for my DB

Currently, in my ChatWindow.jsx, when a user requests an image to be generated, the getImageResponse function is called, and the returned image is added directly to the message box. However, this image is not being added to the ChatHistory through the addChatHistory function. I want to modify the system to achieve the following:

Required Functionality:
1. Update ChatHistory in the userCharacter Table:
- When an image is returned and displayed in the message box, the image URL must also be added to the ChatHistory field of the corresponding userCharacter record (stored via Prisma).
- Use Prisma to find the exact chat message where the user clicked the RiImageCircle icon to request the image (it should be !isUser).
- Once the message is identified, edit the specific message within the ChatHistory field under the correct userCharacter to include the generated image's URL.

2. Client-Side Differentiation of Chat Types:
- When retrieving ChatHistory on the client side in the fetchChatHistory function, differentiate between text messages and image URLs.
- If the message contains an image URL, display the image within the same message element, in the same way it appears when the user initially clicks the RiImageCircleFill icon to generate it.

3. Extend addChatHistory Functionality:
- Ensure that the addChatHistory function runs every time a valid image is generated, and not just when a user or character sends a regular message.
- This ensures that the generated image is added to the ChatHistory immediately, so users can view it whenever they revisit the chat.

Expected Outcome by implementing these changes:
1. Generated images will be persistently stored in ChatHistory for each userCharacter in the database.
2. When users return to the chat, the images will appear in the correct place within the conversation.
3. The ChatWindow.jsx UI will properly render images by checking if a message contains a URL and displaying it accordingly.

With these changes, the system will seamlessly integrate generated images into the chat experience, ensuring consistency between current messages and historical data. Note that I am using Javascript only with NextJS14 app router.


------------------------------------------------------------------------------------------------------------------------------------------
ADD BLUR IN PICTURES IF NO MORE TOKENS

Pass in imgTokenDepleted into getImageAPI route and if true, blur the image.